      SUBROUTINE GRAPHC(FUNCX,STARTX)
C
C          ------------------------------------------------
C          ROUTINE NO. (  98)   VERSION (A8.4)    04:MAR:91
C          ------------------------------------------------
C
C          THIS DRAWS THE GIVEN FUNCTION FROM THE START POINT,
C          IN BOTH DIRECTIONS, UNTIL THE CURVE LEAVES THE WINDOW.
C
C
C          <FUNCX>  IS THE FUNCTION IDENTIFIER (AND MUST BE
C                   DECLARED AS EXTERNAL IN THE CALLING PROGRAM).
C          <STARTX> IS THE START X-POSITION. IF THIS LIES OUTSIDE
C                   THE WINDOW AREA, THE CURVE WILL NOT BE DRAWN.
C
C
      REAL    CURVEX(101),CURVEY(101)
      LOGICAL SAVE
C
      EXTERNAL FUNCX
C
      COMMON /T0CURV/ MCURV0
      COMMON /T0TRAC/ IPRINT
      COMMON /T0TRAR/ RTRAC1,RTRAC2,RTRAC3,RTRAC4
      COMMON /T0WNDO/ X1WND0,X2WND0,Y1WND0,Y2WND0
C
C
      RTRAC1= STARTX
      IF (IPRINT.EQ.1) CALL G0MESG(40,1)
C
C          THE STEP SIZE, ALLOWED TOLERANCES AND THE
C          WINDOW Y-LIMITS ARE CALCULATED. THE CURRENT
C          CURVE METHOD IS SAVED AND METHOD-2 IS SET.
C
      STEPX= ABS(X2WND0-X1WND0)/499.0
      DELTAX= ABS(X2WND0-X1WND0)*0.001
      DELTAY= ABS(Y2WND0-Y1WND0)*0.001
      YMIN= AMIN1(Y1WND0,Y2WND0)
      YMAX= AMAX1(Y1WND0,Y2WND0)
      METSAV= MCURV0
      MCURV0= 2
C
C          THE OUTER LOOP DRAWS THE CURVE IN BOTH DIRECTIONS
C          FROM THE SPECIFIED START POINT. THE APPROPRIATE
C          X-LIMIT AND STEP DIRECTION ARE SET, THEN THE FIRST
C          TWO POINTS AND THE STARTING VALUE OF THE SLOPE ARE
C          FOUND. THE INNER LOOP EXTENDS THE SECOND AND THIRD
C          POINTS UNTIL THE LATTER DIFFERS FROM THE CURRENT SLOPE
C          LINE BY MORE THAN THE ALLOWED TOLERANCE, THE SLOPE
C          BETWEEN THE FIRST AND MIDDLE POINTS IS RECALCULATED,
C          THEN THE SECOND AND THIRD POINTS ARE EXTENDED ANEW
C          UNTIL THE THIRD HAS AGAIN DRIFTED OFF TOO FAR. THE
C          MIDDLE POSITION IS THEN SAVED. THIS IS REPEATED UNTIL
C          ALL OF THE CURVE WITHIN THE WINDOW HAS BEEN DONE. THE
C          SAVED SET OF POINTS IS OUTPUT WHENEVER IT IS TOO LARGE.
C
      DO 100 ISIDE= 1,2
        ENDX= AMAX1(X1WND0,X2WND0)
        IF (ISIDE.EQ.1) GO TO 1
        ENDX= AMIN1(X1WND0,X2WND0)
        STEPX= -STEPX
C
    1   X1= STARTX
        Y1= FUNCX(X1)
        X2= X1+STEPX
        Y2= FUNCX(X2)
        SLOPE= (Y2-Y1)/(X2-X1)
        IF (ABS(SLOPE).LT.1.0E-14) SLOPE= SIGN(1.0E-14,SLOPE)
        NPTS= 1
        CURVEX(1)= X1
        CURVEY(1)= Y1
        SAVE= .FALSE.
    2     X3= X2+STEPX
          IF (ISIDE.EQ.1.AND.X3.GT.ENDX) GO TO 7
          IF (ISIDE.EQ.2.AND.X3.LT.ENDX) GO TO 7
          Y3= FUNCX(X3)
          IF (Y3.LT.YMIN.OR.Y3.GT.YMAX)  GO TO 7
C
    3     DISTX= ABS((Y3-Y1)/SLOPE-(X3-X1))
          DISTY= ABS(DISTX*SLOPE)
          IF (DISTX.GT.DELTAX.AND.DISTY.GT.DELTAY) GO TO 4
          X2= X3
          Y2= Y3
          GO TO 2
C
    4     IF (SAVE) GO TO 5
          SAVE= .TRUE.
          SLOPE= (Y2-Y1)/(X2-X1)
          IF (ABS(SLOPE).LT.1.0E-14) SLOPE= SIGN(1.0E-14,SLOPE)
          GO TO 3
C
    5     IF (NPTS.LT.100) GO TO 6
          CALL G0CURV(CURVEX,CURVEY,1,100,0)
          NPTS= 1
          CURVEX(1)= CURVEX(100)
          CURVEY(1)= CURVEY(100)
C
    6     NPTS= NPTS+1
          CURVEX(NPTS)= X2
          CURVEY(NPTS)= Y2
          SAVE= .FALSE.
          X1= X2
          Y1= Y2
          X2= X3
          Y2= Y3
          GO TO 2
C
    7   NPTS= NPTS+1
        CURVEX(NPTS)= X3
        CURVEY(NPTS)= Y3
        CALL G0CURV(CURVEX,CURVEY,1,NPTS,0)
  100 CONTINUE
C
C          LASTLY, THE ORIGINAL CURVE METHOD IS RESTORED.
C
      MCURV0= METSAV
C
      RETURN
      END
