      SUBROUTINE G1VECT(IXVAL,IYVAL,ITYPE)
C
C          ------------------------------------------------
C          ROUTINE NO. (1008)   VERSION (A8.1AP)  29:MAR:95
C          ------------------------------------------------
C
C          THIS ROUTINE PROVIDES THE VECTOR DRAWING CAPABILITIES
C          OF A DEVICE.
C          (THIS VERSION IS FOR ADOBE POSTSCRIPT)
C
C          THE VALUES OF THE ARGUMENT ARE AS FOLLOWS:
C
C          = 1, DRAW VECTOR FROM (IXMSAV,IYMSAV) TO (IXVAL,IYVAL),
C          = 2, DRAW TO (IXVAL,IYVAL)
C          = 3, MOVE TO (IXVAL,IYVAL) IF NOT ALREADY THERE.
C
C
      INTEGER ICODES(20),IBYTE(5)
      LOGICAL MOVE,DONE,REL
C
      COMMON /T1APAA/ IXPLOT,IYPLOT,IXMSAV,IYMSAV,LENPTH,MAXPTH,
     &                IDLLX,IDLLY,IDURX,IDURY,IPLLX,IPLLY,IPURX,IPURY
      COMMON /T1DLIM/ DLIMX,DLIMY
      COMMON /T1DRES/ DRESX,DRESY
      COMMON /T1LAND/ LNDSCP
C
      DATA IBLANK / 32/, MINUS  / 45/, IZERO  / 48/,
     &     LETTRL / 76/, LETTSL /108/, LETTSM /109/,
     &     LETTSN /110/, LETTSS /115/
C
      MOVE= .FALSE.
      DONE= .TRUE.
      IXPOS= IXVAL
      IYPOS= IYVAL
      IF (LENPTH+2.LE.MAXPTH) GO TO 1
C
      ICODES(1)= IBLANK
      ICODES(2)= LETTSS
      CALL G1BUFF(ICODES,2)
      LENPTH= 0
    1 INDEX= 0
      IF (ITYPE.EQ.2) GO TO 4
      IF (ITYPE.EQ.3) GO TO 2
      IF (IXPLOT.EQ.IXMSAV.AND.IYPLOT.EQ.IYMSAV.AND.LENPTH.GT.0) GO TO 3
C
      MOVE= .TRUE.
      DONE= .FALSE.
      IXPOS= IXMSAV
      IYPOS= IYMSAV
      GO TO 4
C
    2 MOVE= .TRUE.
    3 IF (IXPLOT.EQ.IXPOS.AND.IYPLOT.EQ.IYPOS) RETURN
C
    4 IF (LNDSCP.NE.0) GO TO 5
C
      IXPOST= INT(DLIMY*DRESY)-IYPOS
      IYPOST= IXPOS
      IDX= IYPLOT-IYPOS
      IDY= IXPOS-IXPLOT
      GO TO 6
C
    5 IXPOST= IXPOS
      IYPOST= IYPOS
      IDX= IXPOS-IXPLOT
      IDY= IYPOS-IYPLOT
C
C          CHOOSE ABSOLUTE OR RELATIVE COORDINATES.
C
    6 REL= .TRUE.
      IF (LENPTH.EQ.0.OR.IABS(IDX).GT.IXPLOT.OR.IABS(IDY).GT.IYPLOT
     &    .OR.MOVE) REL= .FALSE.
      IF (.NOT.MOVE) GO TO 8
      IF (LENPTH.EQ.0) GO TO 7
C
      INDEX= INDEX+2
      ICODES(INDEX-1)= IBLANK
      ICODES(INDEX)= LETTSS
    7 INDEX= INDEX+2
      ICODES(INDEX-1)= IBLANK
      ICODES(INDEX)= LETTSN
      LENPTH= 0
    8 INDEX= INDEX+1
      ICODES(INDEX)= IBLANK
      IVCTOR= IXPOST
      IF (REL) IVCTOR= IDX
C
      IFROM= 1
      GO TO 11
C
    9 INDEX= INDEX+1
      ICODES(INDEX)= IBLANK
      IVCTOR= IYPOST
      IF (REL) IVCTOR= IDY
C
      IFROM= 2
      GO TO 11
C
   10 INDEX= INDEX+2
      ICODES(INDEX-1)= IBLANK
      IF (MOVE)                   ICODES(INDEX)= LETTSM
      IF (.NOT.MOVE.AND.REL)      ICODES(INDEX)= LETTRL
      IF (.NOT.MOVE.AND..NOT.REL) ICODES(INDEX)= LETTSL
C
      CALL G1BUFF(ICODES,INDEX)
      IXPLOT= IXPOS
      IYPLOT= IYPOS
      IXMSAV= IXPLOT
      IYMSAV= IYPLOT
      IF (IDLLX.GT.IXMSAV) IDLLX= IXMSAV 
      IF (IPLLX.GT.IXMSAV) IPLLX= IXMSAV 
      IF (IDURX.LT.IXMSAV) IDURX= IXMSAV 
      IF (IPURX.LT.IXMSAV) IPURX= IXMSAV 
      IF (IDLLY.GT.IYMSAV) IDLLY= IYMSAV 
      IF (IPLLY.GT.IYMSAV) IPLLY= IYMSAV 
      IF (IDURY.LT.IYMSAV) IDURY= IYMSAV 
      IF (IPURY.LT.IYMSAV) IPURY= IYMSAV
C
      LENPTH= LENPTH+1
      IF (DONE) RETURN
C
      MOVE= .FALSE.
      DONE= .TRUE.
      IXPOS= IXVAL
      IYPOS= IYVAL
      INDEX= 0
      GO TO 3
C
C          THIS IS AN INTERNAL SUBROUTINE TO CALCULATE THE PLOT
C          CODES FOR A VECTOR AND PUT THEM IN THE OUTPUT BUFFER.
C
   11 IF (IVCTOR.GE.0) GO TO 12
C
      INDEX= INDEX+1
      ICODES(INDEX)= MINUS
      IVCTOR= -IVCTOR
C
C          THE APPROPRIATE FIVE BYTES ARE CALCULATED (LOW -> HIGH
C          ORDER) AND PLACED IN THE BUFFER IN HIGH -> LOW ORDER.
C
   12 DO 100 I= 1,5
        IDIVSN= IVCTOR/10
        IBYTE(I)= IVCTOR-IDIVSN*10
        INDXBT= I
        IVCTOR= IDIVSN
        IF (IDIVSN.EQ.0) GO TO 13
  100 CONTINUE
C
   13 DO 200 I= 1,INDXBT
        IPOS1= INDEX+I
        IPOS2= INDXBT-I+1
        ICODES(IPOS1)= IBYTE(IPOS2)+IZERO
  200 CONTINUE
C
      INDEX= INDEX+INDXBT
C
C          CONTROL ALWAYS RETURNS TO THE ORIGINATING SECTION
C
      GO TO (9,10), IFROM
      END
