      SUBROUTINE G1CRV1(XPOS,YPOS,LASTPT)
C
C          ------------------------------------------------
C          ROUTINE NO. (1026)   VERSION (A8.4)    03:NOV:89
C          ------------------------------------------------
C
C          THIS GENERATES A SMOOTH CURVE FROM A SET OF POINTS.
C          TWO DIFFERENT CURVE-FITTING METHODS ARE SUPPORTED.
C
C
      REAL    CDISTS(3)
      LOGICAL LASTPT
      LOGICAL OPCURV
C
      COMMON /T1CRSV/ XCVSAV(3),YCVSAV(3),INDXCV,ICVPTR,
     &                DX1CV,DY1CV,XI1CV,YI1CV,NCVPTS,CUBX1,CUBY1
      COMMON /T1CURV/ MCURV1,OPCURV
      COMMON /T3LIMS/ IMAXI,RMAXI,RMINI
C
      DATA GPARA /13.0/, ERRZON /1.0E-5/
C
      G1END(DV,FV)= (3.0*DV-FV)*0.5
C
C
C          POINTS ARE SAVED UNTIL A TRIPLET IS OBTAINED.
C          INITIAL VALUES ARE SET AT THE START OF A CURVE.
C
      XINP= XPOS
      YINP= YPOS
      IF (ICVPTR.NE.3) GO TO 1
C
      NCVPTS= 1
      INDXCV= 0
      ICVPTR= 0
      GO TO 9
C
C          SUCCESSIVE COINCIDENT POINTS ARE IGNORED.
C          THE CHORD GRADIENTS ARE CALCULATED HERE.
C
    1 DX2CV= XI1CV-XINP
      DY2CV= YI1CV-YINP
      IF (ABS(DX2CV).LT.RMINI.AND.ABS(DY2CV).LT.RMINI) GO TO 10
C
      NCVPTS= NCVPTS+1
      IF (NCVPTS.GT.2) GO TO 2
      IF (OPCURV)      GO TO 7
      GO TO 8
C
C          THE GRADIENTS AT THE MIDDLE POINT ARE CALCULATED.
C          THE ARITHMETIC MEAN IS USED WITH THE FIRST METHOD
C          AND THE HARMONIC MEAN IS USED WITH THE SECOND ONE.
C
    2 IF (MCURV1.NE.1) GO TO 3
C
      GRADX= (DX1CV+DX2CV)*0.5
      GRADY= (DY1CV+DY2CV)*0.5
      GO TO 5
C
    3 GRADX= 0.0
      EXT= DX1CV*DX2CV
      IF (EXT.LE.0.0) GO TO 4
C
      GRADX= (EXT+EXT)/(DX1CV+DX2CV)
    4 GRADY= 0.0
      EXT= DY1CV*DY2CV
      IF (EXT.LE.0.0) GO TO 5
C
      GRADY= (EXT+EXT)/(DY1CV+DY2CV)
    5 IF (NCVPTS.GT.3) GO TO 13
C
C          AFTER 3 POINTS HAVE BEEN DONE, THE NEXT
C          PORTION OF THE CURVE IS THEN PROCESSED.
C
      IF (INDXCV.EQ.2) GO TO 6
C
C          GRADIENTS AT THE START OF THE CURVE ARE FOUND HERE.
C
      CUBX1= G1END(DX1CV,GRADX)
      CUBY1= G1END(DY1CV,GRADY)
      GO TO 13
C
    6 CUBX1= GRADX
      CUBY1= GRADY
C
C          THIS MOVES THE PEN TO THE START POSITION.
C
    7 CALL G1LINE(XI1CV,YI1CV,.FALSE.)
C
C          VARIABLES NEEDED FOR SUBSEQUENT USE ARE SAVED.
C          THE FIRST 3 POINTS ARE SAVED FOR A CLOSED CURVE.
C
    8 DX1CV= DX2CV
      DY1CV= DY2CV
    9 XI1CV= XINP
      YI1CV= YINP
      IF (OPCURV.OR.INDXCV.EQ.3) GO TO 10
C
      INDXCV= INDXCV+1
      XCVSAV(INDXCV)= XINP
      YCVSAV(INDXCV)= YINP
   10 IF (.NOT.LASTPT) RETURN
C
C          THE CURVE IS COMPLETED AFTER THE LAST POINT IS DONE.
C          IF THE CURVE IS CLOSED, THE FIRST 3 POINTS ARE USED AGAIN.
C
      IF (INDXCV.NE.3) GO TO 11
C
      ICVPTR= ICVPTR+1
      XINP= XCVSAV(ICVPTR)
      YINP= YCVSAV(ICVPTR)
      GO TO 1
C
   11 ICVPTR= 3
      IF (NCVPTS.LE.1) RETURN
      IF (NCVPTS.GE.3) GO TO 12
C
C          A CURVE WITH ONLY TWO POINTS IS A STRAIGHT LINE.
C
      IF (INDXCV.EQ.2) CALL G1LINE(XCVSAV(1),YCVSAV(1),.FALSE.)
C
      CALL G1LINE(XI1CV,YI1CV,.TRUE.)
      GO TO 26
C
C          THIS SECTION CALCULATES GRADIENTS AT THE END OF THE CURVE.
C          A CUBIC FUNCTION WITH ZERO 2ND. END-DERIVATIVES IS USED.
C
   12 GRADX= G1END(DX1CV,CUBX1)
      GRADY= G1END(DY1CV,CUBY1)
C
C          THIS SECTION DRAWS A SMOOTH CURVE BETWEEN TWO POINTS
C          USING BUTLAND'S ALGORITHM TO MINIMISE THE NUMBER OF
C          STRAIGHT SEGMENTS. THE CURVE SMOOTHNESS (AND THE NO.
C          OF SEGMENTS) INCREASES AS <GPARA> IS MADE LARGER.
C
   13 D1X= CUBX1
      D1Y= CUBY1
C
C          THE NEW CUBIC COEFFICIENTS ARE CALCULATED HERE.
C
      CUBX3= CUBX1+GRADX-DX1CV-DX1CV
      CUBX2= DX1CV-CUBX3-GRADX
      CUBX1= GRADX
      CUBY3= CUBY1+GRADY-DY1CV-DY1CV
      CUBY2= DY1CV-CUBY3-GRADY
      CUBY1= GRADY
C
C          ANY POINTS WHERE THE CURVATURE CHANGES DIRECTION IS
C          FOUND, AND THE VALUE OF <CDIST> AT THESE POINTS IS SAVED.
C
      NFITS= 1
      CUB23= 3.0*(CUBX2*CUBY3-CUBX3*CUBY2)
      CUB31= 3.0*(CUBX3*CUBY1-CUBX1*CUBY3)
      SNUM= CUBX1*CUBY2-CUBX2*CUBY1
      IF (ABS(CUB23).GE.RMINI) GO TO 14
      IF (ABS(CUB31).LT.RMINI) GO TO 17
C
      CDIST= SNUM/CUB31
      GO TO 16
C
   14 CDIST= CUB31/(CUB23+CUB23)
      TEMP2= CDIST*CDIST-SNUM/CUB23
      IF (ABS(TEMP2).LT.ERRZON) GO TO 16
      IF (TEMP2.LT.0.0)         GO TO 17
C
      TEMP2= SQRT(TEMP2)
      TEMP1= CDIST+TEMP2
      IF (TEMP1.LT.ERRZON)      GO TO 17
      IF (1.0-TEMP1.LT.ERRZON)  GO TO 15
C
      CDISTS(1)= TEMP1
      NFITS= 2
   15 CDIST= CDIST-TEMP2
   16 IF (CDIST.LT.ERRZON.OR.1.0-CDIST.LT.ERRZON) GO TO 17
C
      CDISTS(NFITS)= CDIST
      NFITS= NFITS+1
   17 CDISTS(NFITS)= 0.0
      CDIST= 1.0
C
C          THE MINIMUM NUMBER OF STRAIGHT LINE SEGMENTS
C          IS FITTED TO EACH PART OF THE CURVE IN TURN.
C
      DO 100 IFIT= 1,NFITS
        KOUNT= 0
        NDIV= 0
        IF (ABS(D1X).LT.RMINI.AND.ABS(D1Y).LT.RMINI) GO TO 24
C
        EXTRX= (3.0*CUBX3*CDISTS(IFIT)+2.0*CUBX2)*CDISTS(IFIT)+CUBX1
        EXTRY= (3.0*CUBY3*CDISTS(IFIT)+2.0*CUBY2)*CDISTS(IFIT)+CUBY1
        IF (ABS(EXTRX).LT.RMINI.AND.ABS(EXTRY).LT.RMINI) GO TO 24
C
        ALPHA= ATAN2(D1Y,D1X)
        BETA=  ATAN2(EXTRY,EXTRX)
        THETA= ALPHA-BETA
        DIMID= 0.5*(CDIST+CDISTS(IFIT))
        CUMID= DIMID*(CUB23*DIMID-CUB31)+SNUM
C
C          IF <THETA> DOES NOT HAVE THE SAME SIGN AS THE
C          CURVATURE <CUMID>, IT IS ADJUSTED BY 360 DEGREES.
C
        IF (CUMID*THETA.GE.0.0) GO TO 18
C
        ADJ= 6.283185307
        IF (CUMID.LT.0.0) ADJ= -ADJ
C
        THETA= THETA+ADJ
C
C          <NDIV> STRAIGHT-LINE ELEMENTS ARE FOUND AND DRAWN.
C
   18   NDIV= INT(ABS(THETA*GPARA)-0.5)
        IF (NDIV.LT.1) GO TO 24
C
        THETA2= THETA/(NDIV+1)
        TANI= COS(THETA2)/SIN(THETA2)
C
   19     D2X= CUBX2+CDIST*3.0*CUBX3
          D2Y= CUBY2+CDIST*3.0*CUBY3
          D1X= CUBX1+CDIST*(CUBX2+D2X)
          D1Y= CUBY1+CDIST*(CUBY2+D2Y)
          TNUM= D1X*D1X+D1Y*D1Y
          SLOP1= TANI*(D1X*D2Y-D1Y*D2X)+D1X*D2X+D1Y*D2Y
          SLOP2= 3.0*(TANI*(D1X*CUBY3-D1Y*CUBX3)+D1X*CUBX3+D1Y*CUBY3)
C
C          THE CHANGE IN <CDIST> DEPENDS ON THE CURVATURE.
C          <CDSTEP> IS NOT ALLOWED TO GO TOO CLOSE TO ZERO.
C
          IF (ABS(SLOP2).GT.ERRZON) GO TO 21
          IF (ABS(SLOP1).GT.ERRZON) GO TO 20
C
          CDSTEP= 0.01
          GO TO 22
C
   20     CDSTEP= TNUM/(SLOP1+SLOP1)
          GO TO 22
C
   21     ARG= SLOP1*SLOP1-TNUM*SLOP2
          IF (ARG.LT.ERRZON) ARG= 0.0
C
          CDSTEP= (SLOP1-SQRT(ARG))/SLOP2
   22     IF (CDSTEP.LT.ERRZON) CDSTEP= 0.001
C
          CDIST= CDIST-CDSTEP
C
C          THE NEXT LINE HAS BEEN REPLACED BY THE ONE AFTER.
C
C         IF (CDSTEP.GT.CDIST) CDIST= 0.0
          IF (CDIST.LT.ERRZON) CDIST= 0.0
C
   23     XNOW= XI1CV+CDIST*(CUBX1+CDIST*(CUBX2+CDIST*CUBX3))
          YNOW= YI1CV+CDIST*(CUBY1+CDIST*(CUBY2+CDIST*CUBY3))
          CALL G1LINE(XNOW,YNOW,.TRUE.)
          KOUNT= KOUNT+1
          IF (KOUNT.LT.NDIV) GO TO 19
          IF (KOUNT.GT.NDIV) GO TO 25
C
   24     CDIST= CDISTS(IFIT)
          GO TO 23
C
   25   D1X= EXTRX
        D1Y= EXTRY
  100 CONTINUE
C
   26 IF (ICVPTR.LT.3) GO TO 8
C
      RETURN
      END
