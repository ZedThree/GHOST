      SUBROUTINE G1SHAD(IPARAM)
C
C          ------------------------------------------------
C          ROUTINE NO. (1009)   VERSION (A8.1)    19:JUN:92
C          ------------------------------------------------
C
C          THIS DOES PARALLEL-LINE SHADING WITHIN A POLYGONAL BOUNDARY
C          SPECIFIED BY A SET OF VERTEX CO-ORDINATES. (THE CLOSURE
C          BOUNDARY LINE IS DEFINED BY THE FIRST AND LAST VERTICES).
C
C
C          THE ARGUMENTS ARE AS FOLLOWS:
C
C          <IPARAM> DETERMINS WHICH SET OF PARAMETERS IS USED.
C
C
      REAL    WORK(1000,3),STYLE(4)
      LOGICAL VISIBL,DRAW,BROKEN,XFLAG
C
      COMMON /T1DRES/ DRESX,DRESY
      COMMON /T1FLBF/ IXSAVE(1000),IYSAVE(1000),ISAVSZ,INDSAV
      COMMON /T1HTCH/ IHTCHP(11,2)
      COMMON /T3LIMS/ IMAXI,RMAXI,RMINI
C
C          THE FOLLOWING ARE THE FORWARD AND BACKWARD ROTATIONS:
C
      ROTX(X,Y)= X*COSA+Y*SINA
      ROTY(X,Y)= Y*COSA-X*SINA
      REROTX(X,Y)= X*COSA-Y*SINA
      REROTY(X,Y)= Y*COSA+X*SINA
C
C
      RESOLU= 0.001*DRESX
      PITCH= IHTCHP(9,IPARAM)*RESOLU*0.01
      SHIFT= MOD(IHTCHP(7,IPARAM),IHTCHP(9,IPARAM))*RESOLU*0.01
      ISTLEN= 0
      STLEN= 0.0
C
      DO 100 LOAD= 1,4
        STYLE(LOAD)= IHTCHP(LOAD+2,IPARAM)*RESOLU
        STLEN= STLEN+STYLE(LOAD)
        ISTLEN= ISTLEN+IHTCHP(LOAD+2,IPARAM)
  100 CONTINUE
C
      BROKEN= .FALSE.
      PHASE= 0.0
      PATSFT= 0.0
      IF (ISTLEN.EQ.0) GO TO 1
C
      BROKEN= .TRUE.
      PHASE= MOD(IHTCHP(8,IPARAM),ISTLEN)*RESOLU
      PATSFT= MOD(IHTCHP(10,IPARAM),ISTLEN)*RESOLU
    1 ANGL= IHTCHP(1,IPARAM)*0.00001
      COSA= COS(ANGL)
      SINA= SIN(ANGL)
C
C          ALL THE VERTEX CO-ORDINATES ARE ROTATIONALLY
C          TRANSFORMED ABOUT THE ORIGIN.
C
      DO 200 ISIDE= 1,INDSAV
        WORK(ISIDE,1)= ROTX(FLOAT(IXSAVE(ISIDE)),FLOAT(IYSAVE(ISIDE)))
        WORK(ISIDE,2)= ROTY(FLOAT(IXSAVE(ISIDE)),FLOAT(IYSAVE(ISIDE)))
        IF (ISIDE.NE.1) GO TO 2
C
        YMAX= WORK(ISIDE,2)
        YMIN= YMAX
    2   IF (WORK(ISIDE,2).GT.YMAX) YMAX= WORK(ISIDE,2)
        IF (WORK(ISIDE,2).LT.YMIN) YMIN= WORK(ISIDE,2)
  200 CONTINUE
C
C          LOOP-300 DOES EACH SHADE LINE IN TURN.
C          LOOP-400 SEARCHES EVERY BOUNDARY SIDE FOR
C          A CROSSOVER POINT, AND WHERE ONE EXISTS,
C          LOOP-500 SORTS IT DOWN THE ORDERED LIST OF
C          CROSSOVER-POINT YR-VALUES BY REPEATED SWAPS.
C
C          IF REL. X-POSITIONS HAVE THE SAME SIGN, THEN NO
C          CROSSOVER POINT EXISTS ON THIS BOUNDARY LINE.
C
      LSTLIN= YMAX/PITCH+1
      IF (YMAX.LT.0.0) LSTLIN= LSTLIN-1
C
      IFSTLN= YMIN/PITCH
      IF (YMIN.LT.0.0) IFSTLN= IFSTLN-1
C
      DO 300 LINE= IFSTLN,LSTLIN
        XMIN= IMAXI
        XMAX= -IMAXI
        XFLAG= .FALSE.
        YR= PITCH*LINE+SHIFT
        YR1= WORK(INDSAV-1,2)-YR
        NCROSS= 0
C
        DO 400 ISIDE= 1,INDSAV-1
          XR1= WORK(ISIDE,1)
          XR2= WORK(ISIDE+1,1)
          YRL= YR1
          YR1= WORK(ISIDE,2)-YR
          YR2= WORK(ISIDE+1,2)-YR
          IF (ABS(YR1).LT.0.5) THEN
            XFLAG= .TRUE.
            IF (XR1.LT.XMIN) XMIN= XR1
            IF (XR1.GT.XMAX) XMAX= XR1
          ENDIF
C
          IF (YR1*YR2.GT.0.0) GO TO 400
          IF (ABS(YR1).LT.RMINI.AND.
     &        (ABS(YR2).LT.RMINI.OR.YR2*YRL.LT.0.0)) GO TO 400
C
C          FIND INTERSECTION POINT.
C
          LIMIT= NCROSS
          NCROSS= NCROSS+1
          WORK(NCROSS,3)= (YR1*(XR2-XR1)/(YR1-YR2))+XR1
          IF (NCROSS.EQ.1) GO TO 400
C
C          SORT THE INTERSECTION POINTS.
C
          DO 500 ISORT= 1,LIMIT
            LEVEL= NCROSS-(ISORT-1)
            VALUHI= WORK(LEVEL  ,3)
            VALULO= WORK(LEVEL-1,3)
            IF (VALUHI.GE.VALULO) GO TO 400
C
            WORK(LEVEL  ,3)= VALULO
            WORK(LEVEL-1,3)= VALUHI
  500     CONTINUE
  400   CONTINUE
C
C          IF THERE ARE NO CROSSOVER POINTS, THE NEXT SHADE LINE IS
C          BEGUN; OTHERWISE, THE PRESENT LINE RUNS THROUGH ALL THE
C          CROSSOVER POINTS (IN ORDER), ALTERNATING IN VISIBILITY.
C
        IF (NCROSS.LE.0) THEN
          IF (XFLAG) THEN
            WORK(1,3)= XMIN
            WORK(2,3)= XMAX
            NCROSS= 2
          ELSE
            GO TO 300
          ENDIF
C
        ENDIF
C
        VISIBL= .FALSE.
        IDRAW= 0
        XPOS= LINE*PHASE+PATSFT
    3   IDRAW= IDRAW+1
        IF (IDRAW.GT.NCROSS) GO TO 300
C
        XR= WORK(IDRAW,3)
        IY= REROTY(XR,YR)+0.5
        IF (VISIBL) GO TO 4
C
        XSTART= XR
        IX= REROTX(XR,YR)+0.5
        CALL G1VECT(IX,IY,3)
        GO TO 12
C
    4   IF (BROKEN) GO TO 5
C
        IX= REROTX(XR,YR)+0.5
        CALL G1VECT(IX,IY,1)
        GO TO 12
C
C          THIS SECTION DEALS WITH BROKEN LINES.
C
    5   XEND= XR
        XR= -XPOS
    6   IF (XR.LE.XSTART) GO TO 7
C
        XR= XR-STLEN
        GO TO 6
C
    7   DRAW= .TRUE.
        ISTPTR= 1
    8   XR= XR+STYLE(ISTPTR)
        IF (XR.GT.XSTART) GO TO 9
C
        ISTPTR= ISTPTR+1
        IF (ISTPTR.EQ.5) ISTPTR= 1
C
        DRAW= .NOT.DRAW
        GO TO 8
C
    9   IX= REROTX(XSTART,YR)+0.5
        IY= REROTY(XSTART,YR)+0.5
        CALL G1VECT(IX,IY,3)
        IF (XR.GT.XEND) GO TO 11
C
   10   IX= REROTX(XR,YR)+0.5
        IY= REROTY(XR,YR)+0.5
        IF (.NOT.DRAW) CALL G1VECT(IX,IY,3)
        IF (DRAW)      CALL G1VECT(IX,IY,1)
C
        ISTPTR= ISTPTR+1
        IF (ISTPTR.EQ.5) ISTPTR= 1
C
        DRAW= .NOT.DRAW
        XR= XR+STYLE(ISTPTR)
        IF (XR.LE.XEND) GO TO 10
   11   IF (.NOT.DRAW) GO TO 12
C
        IX= REROTX(XEND,YR)+0.5
        IY= REROTY(XEND,YR)+0.5
        CALL G1VECT(IX,IY,1)
   12   VISIBL= .NOT.VISIBL
        GO TO 3
C
  300 CONTINUE
C
      CALL G1VECT(IXSAVE(1),IYSAVE(1),3)
C
      RETURN
      END
