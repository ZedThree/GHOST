      SUBROUTINE G0CTIA(SURFAS,ISTRTX,ISTOPX,NPTSX,ISTRTY,ISTOPY,NPTSY,
     &                  XGRIDS,YGRIDS,IXDIRO,IYDIRO)
C
C          ------------------------------------------------
C          ROUTINE NO. ( 126)   VERSION (A8.3)    20:OCT:86
C          ------------------------------------------------
C
C          THIS DRAWS CONTOURS OF A GIVEN LEVEL ON A 'TARTAN' GRID.
C
C
C          THE ARGUMENTS ARE AS FOLLOWS:
C
C          [SURFAS] IS THE ARRAY OF SURFACE HEIGHT VALUES,
C          <ISTRTX> IS THE LOWER X-EXTENT,
C          <ISTOPX> IS THE UPPER X-EXTENT, WHILE
C          <ISTRTY> AND
C          <ISTOPY> ARE THE CORRESPONDING Y-BOUNDS.
C          <NPTSX>  IS THE ACTUAL ARRAY X-EXTENT, AND
C          <NPTSY>  IS THE ACTUAL ARRAY Y-EXTENT.
C          [XGRIDS] ARE THE GRID X-POSITIONS.
C          [YGRIDS] ARE THE GRID Y-POSITIONS.
C          <IXDIRO> IS THE INITIAL ENTRY-EDGE X-DIRECTION,
C          <IYDIRO> IS THE INITIAL ENTRY-EDGE Y-DIRECTION.
C
C
C          EACH MESH ELEMENT IS DIVIDED AS FOLLOWS:
C
C               A  ------------------- B
C                  |\               /|
C                  | \             / |
C                  |  \           /  |
C                  |   \         /   |
C                  |    \       /    |
C                  |     \     /     |
C                  |      \   /      |
C                  |       \ /       |
C                  |      E /        |
C                  |       / \       |
C                  |      /   \      |
C                  |     /     \     |
C                  |    /       \    |
C                  |   /         \   |
C                  |  /           \  |
C                  | /             \ |
C                  |/               \|
C               C  ------------------- D
C
C          THE CONTOUR LINE IS ALWAYS TAKEN AS ENTERING ACROSS
C          THE EDGE 'A-B', AND THE 'A-B' ORIENTATION IS ADJUSTED
C          ACCORDINGLY. THE POSSIBLE (QUADRANT) ORIENTATIONS ARE:
C
C          (AS ABOVE);    <IXDIR>= +1, <IYDIR>=  0,
C          (CLOCKWISE 1); <IXDIR>=  0, <IYDIR>= -1,
C          (CLOCKWISE 2); <IXDIR>= -1, <IYDIR>=  0,
C          (CLOCKWISE 3); <IXDIR>=  0, <IYDIR>= +1.
C
C
      REAL    SURFAS(NPTSX,NPTSY),XGRIDS(NPTSX),YGRIDS(NPTSY)
      LOGICAL OPENCO,FRSTPT,LASTPT,CURVED
      LOGICAL LEFT
C
      COMMON /T0CEND/ FRSTPT,LASTPT
      COMMON /T0CLEV/ LEVEL,HEIGHT
      COMMON /T0CMAP/ MAPBIT(6,192),ISTPTX,ISTPTY
      COMMON /T0CTYP/ OPENCO,CURVED
C
      DATA NBITSW /32/
C
C
      IX= ISTPTX
      IY= ISTPTY
      IXDIR= IXDIRO
      IYDIR= IYDIRO
      FRSTPT= .TRUE.
      LASTPT= .FALSE.
      VALA= SURFAS(IX,IY)
      IXNEW= IX+IXDIR
      IYNEW= IY+IYDIR
      VALB= SURFAS(IXNEW,IYNEW)
C
C          THE CONTOUR ALWAYS ENTERS THE ELEMENT VIA 'A-B'.
C          THE POINT WHERE THE CONTOUR CROSSES THE EDGE IS
C          DETERMINED USING INVERSE LINEAR INTERPOLATION.
C
    1 OFFSET= (VALA-HEIGHT)/(VALA-VALB)
      X= FLOAT(IX)+OFFSET*FLOAT(IXDIR)
      Y= FLOAT(IY)+OFFSET*FLOAT(IYDIR)
      CALL G0GPOS(XGRIDS,YGRIDS,NPTSX,NPTSY,X,Y,GPOSX,GPOSY)
C
C          THIS SECTION FINDS THE END OF A CLOSED CONTOUR LINE.
C          THIS OCCURS WHEN IT IS CROSSING AN EDGE UPWARDS AND
C          THE CORRESPONDING ENTRY IN THE BIT-MAP [MAPBIT] IS
C          ZERO. IN THIS CASE <LASTPT> IS MADE 'TRUE' AND THE
C          LINE IS COMPLETED. OTHERWISE THE BIT-MAP IS UPDATED.
C
      IF (OPENCO)      GO TO 2
      IF (FRSTPT)      GO TO 4
      IF (IXDIR.NE.-1) GO TO 6
C
      IXWRD= (IX-ISTRTX-1)/NBITSW+1
      IXBIT= MOD((IX-ISTRTX-1),NBITSW)+1
      CALL G4GETB(MAPBIT(IXWRD,(IY-ISTRTY)),IXBIT,IBIT)
      IF (IBIT.NE.0) GO TO 5
      LASTPT= .TRUE.
      GO TO 6
C
C          THIS SECTION FINDS THE END OF AN OPEN CONTOUR LINE.
C          THIS OCCURS WHEN IT ARRIVES AT AN X OR Y EDGE. IF
C          AN EDGE IS FOUND, <LASTPT> IS MADE 'TRUE' AND THE
C          LINE IS COMPLETED. OTHERWISE THE BIT-MAP IS UPDATED.
C          <INOTAT> INDICATES THE DIRECTION THE CONTOUR IS
C          ENTERING THE MESH ELEMENT AND TAKES THE FOLLOWING VALUES:
C          1  FROM THE LEFT,  2  FROM THE RIGHT,
C          3  FROM THE TOP,   4  FROM THE BOTTOM.
C
    2 INOTAT= IABS(IXDIR)*(7-IXDIR)/2+IABS(IYDIR)*(3-IYDIR)/2
      IF (FRSTPT) GO TO 6
      IF (IYDIR.EQ.0) GO TO 3
      IF (IX.EQ.ISTRTX.OR.IX.EQ.ISTOPX) LASTPT= .TRUE.
      GO TO 6
    3 IF (IY.EQ.ISTRTY.OR.IY.EQ.ISTOPY) LASTPT= .TRUE.
      IF (LASTPT.OR.IXDIR.NE.-1) GO TO 6
C
C          THIS SECTION UPDATES THE BIT-MAP HELD IN [MAPBIT]
C          WHENEVER THE CONTOUR LINE CROSSES AN EDGE UPWARDS.
C
    4 IXWRD= (IX-ISTRTX-1)/NBITSW+1
      IXBIT= MOD((IX-ISTRTX-1),NBITSW)+1
    5 CALL G4PUTB(MAPBIT(IXWRD,(IY-ISTRTY)),IXBIT,0)
C
C          THE CONTOUR LINE IS UPDATED, AND A NEW ELEMENT IS
C          BEGUN IF THE CONTOUR LINE HAS NOT REACHED ITS END.
C          <FRSTPT> IS MADE 'FALSE', THE HEIGHTS AT 'C' AND
C          'D' ARE FOUND, AND THE HEIGHT AT 'E' IS CALCULATED
C          AS THE AVERAGE OF THOSE AT 'A', 'B', 'C' AND 'D'.
C          THE VALUE OF <INOTAT> IS REVERSED FOR THE LAST POINT.
C
    6 INMOD= MOD(INOTAT,2)
      IF (LASTPT.AND.INMOD.EQ.0) INOTAT= INOTAT-1
      IF (LASTPT.AND.INMOD.EQ.1) INOTAT= INOTAT+1
      IF (.NOT.OPENCO) INOTAT= 0
C
      CALL G0CPLT(GPOSX,GPOSY,INOTAT)
      IF (LASTPT) RETURN
C
      FRSTPT= .FALSE.
      INDX1= IX+IYDIR
      INDX2= INDX1+IXDIR
      INDY1= IY-IXDIR
      INDY2= INDY1+IYDIR
      VALC= SURFAS(INDX1,INDY1)
      VALD= SURFAS(INDX2,INDY2)
      VALE= 0.25*(VALA+VALB+VALC+VALD)
C
C          THE CONTOUR MUST CROSS EITHER 'A-E' OR 'B-E':
C
      IF (VALE.GE.HEIGHT) GO TO 8
C
C          THE CONTOUR CROSSES 'A-E' SO <LEFT> IS MADE 'TRUE'.
C          THE POINT WHERE THE CONTOUR CROSSES THE LINE IS FOUND
C          USING INVERSE LINEAR INTERPOLATION AND THE LINE DRAWN.
C
      LEFT= .TRUE.
      OFFSET= 0.5*(VALA-HEIGHT)/(VALA-VALE)
      X= FLOAT(IX)+OFFSET*FLOAT(IXDIR+IYDIR)
      Y= FLOAT(IY)+OFFSET*FLOAT(IYDIR-IXDIR)
      CALL G0GPOS(XGRIDS,YGRIDS,NPTSX,NPTSY,X,Y,GPOSX,GPOSY)
      CALL G0CPLT(GPOSX,GPOSY,0)
C
C          THE CONTOUR LINE THEN CROSSES 'C-E' OR EXITS VIA 'A-C'.
C
      IF (VALC.LT.HEIGHT) GO TO 10
C
C          THE CONTOUR CROSSES 'C-E'. THE INTERSECTION POINT IS FOUND
C          USING INVERSE LINEAR INTERPOLATION AND THE LINE IS DRAWN.
C
    7 OFFSET= 0.5*(VALC-HEIGHT)/(VALC-VALE)
      X= FLOAT(INDX1)-OFFSET*FLOAT(IYDIR-IXDIR)
      Y= FLOAT(INDY1)+OFFSET*FLOAT(IXDIR+IYDIR)
      CALL G0GPOS(XGRIDS,YGRIDS,NPTSX,NPTSY,X,Y,GPOSX,GPOSY)
      CALL G0CPLT(GPOSX,GPOSY,0)
C
C          IF <LEFT> IS 'TRUE', THE CONTOUR LINE CAN EITHER EXIT
C          VIA THE EDGE 'C-D' OR CROSS THE LINE 'D-E'. IF <LEFT>
C          IS 'FALSE', THE CONTOUR LINE PASSES INTO TRIANGLE 'A-C-E'
C          AND THEN MUST EXIT FROM THE ELEMENT VIA THE EDGE 'A-C'.
C
      IF (.NOT.LEFT) GO TO 10
      IF (VALD.LT.HEIGHT) GO TO 11
      GO TO 9
C
C         THE CONTOUR CROSSES 'B-E' SO <LEFT> IS MADE 'FALSE'.
C         THE POINT WHERE THE CONTOUR CROSSES THE LINE IS FOUND
C         USING INVERSE LINEAR INTERPOLATION AND THE LINE DRAWN.
C
    8 LEFT= .FALSE.
      OFFSET= 0.5*(1.0+(VALE-HEIGHT)/(VALE-VALB))
      X= FLOAT(INDX1)-OFFSET*FLOAT(IYDIR-IXDIR)
      Y= FLOAT(INDY1)+OFFSET*FLOAT(IXDIR+IYDIR)
      CALL G0GPOS(XGRIDS,YGRIDS,NPTSX,NPTSY,X,Y,GPOSX,GPOSY)
      CALL G0CPLT(GPOSX,GPOSY,0)
C
C          THE CONTOUR LINE THEN CROSSES 'D-E' OR EXITS VIA 'B-D'.
C
      IF (VALD.GE.HEIGHT) GO TO 12
C
C          THE CONTOUR CROSSES 'D-E'. THE INTERSECTION POINT IS FOUND
C          USING INVERSE LINEAR INTERPOLATION AND THE LINE IS DRAWN.
C
    9 OFFSET= 0.5*(1.0+(VALE-HEIGHT)/(VALE-VALD))
      X= FLOAT(IX)+OFFSET*FLOAT(IXDIR+IYDIR)
      Y= FLOAT(IY)+OFFSET*FLOAT(IYDIR-IXDIR)
      CALL G0GPOS(XGRIDS,YGRIDS,NPTSX,NPTSY,X,Y,GPOSX,GPOSY)
      CALL G0CPLT(GPOSX,GPOSY,0)
C
C          IF <LEFT> IS 'FALSE', THE CONTOUR LINE CAN EITHER EXIT
C          VIA THE EDGE 'C-D' OR CROSS THE LINE 'C-E'. IF <LEFT>
C          IS 'TRUE', THE CONTOUR LINE PASSES INTO TRIANGLE 'B-D-E'
C          AND THEN MUST EXIT FROM THE ELEMENT VIA THE EDGE 'B-D'.
C
      IF (LEFT)      GO TO 12
      IF (VALC.LT.HEIGHT) GO TO 7
      GO TO 11
C
C
C          THE CONTOUR LINE EXITS VIA THE EDGE 'A-C'.
C          VALUES ARE UPDATED AND THE CONTOUR CONTINUED.
C
   10 VALB= VALC
      ITEMP= IXDIR
      IXDIR= IYDIR
      IYDIR= -ITEMP
      GO TO 1
C
C          THE CONTOUR LINE EXITS VIA THE EDGE 'C-D'.
C          VALUES ARE UPDATED AND THE CONTOUR CONTINUED.
C
   11 VALA= VALC
      VALB= VALD
      IX= INDX1
      IY= INDY1
      GO TO 1
C
C          THE CONTOUR LINE EXITS VIA THE EDGE 'B-D'.
C          VALUES ARE UPDATED AND THE CONTOUR CONTINUED.
C
   12 VALA= VALD
      IX= INDX2
      IY= INDY2
      ITEMP= IYDIR
      IYDIR= IXDIR
      IXDIR= -ITEMP
      GO TO 1
C
      END
