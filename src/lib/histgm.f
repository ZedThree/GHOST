      SUBROUTINE HISTGM(XORIG,YORIG,BARWID,VALUES,ISTART,ISTOP)
C
C          ------------------------------------------------
C          ROUTINE NO. (  81)   VERSION (A8.8)    14:JUL:88
C          ------------------------------------------------
C
C          THIS DRAWS A HISTOGRAM OF A GIVEN SET OF VALUES.
C                BARS CAN BE HORIZONTAL OR VERTICAL.
C
C
C          THE ARGUMENTS ARE AS FOLLOWS:
C
C          <XORIG>  IS THE X-ORIGIN OF THE GRAPH,
C          <YORIG>  IS THE Y-ORIGIN OF THE GRAPH,
C          <BARWID> IS THE THICKNESS OF THE BARS,
C          [VALUES] ARE THE VALUES TO BE GRAPHED,
C          <ISTART> IS THE LOWER BOUNDARY, AND
C          <ISTOP>  IS THE UPPER BOUNDARY OF THE ARRAY.
C
C
      REAL    BAUTO(2),VAUTO(2),VALUES(ISTOP),RDATA(1)
      INTEGER IDATA(1)
C
      COMMON /T0BRTY/ IBRTYP
      COMMON /T0DBND/ IDRBND
      COMMON /T0KLST/ LSTCL0(100),LENLST
      COMMON /T0PPOS/ XPLOT0,YPLOT0
      COMMON /T0TRAC/ IPRINT
      COMMON /T0TRAR/ RTRAC1,RTRAC2,RTRAC3,RTRAC4
      COMMON /T3LIMS/ IMAXI,RMAXI,RMINI
C
      DATA RDATA /0.0/
C
C
      RTRAC1= XORIG
      RTRAC2= YORIG
      RTRAC3= BARWID
      IF (IPRINT.EQ.1) CALL G0MESG(33,3)
C
      BORIG= XORIG
      BASPOS= YORIG
      IF (IBRTYP.EQ.0) GO TO 1
C
      BORIG= YORIG
      BASPOS= XORIG
C
C          AUTOMATIC MAPPING IS DONE FOR THE GIVEN VALUES.
C          THE CURRENT PLOTTING POSITION IS SAVED, THE
C          HISTOGRAM IS DRAWN, THEN THE POSITION IS RESTORED.
C
    1 NUMBR= ISTOP-ISTART+1
      IF (NUMBR.LT.1) RETURN
C
      BAUTO(1)= BORIG
      BAUTO(2)= BORIG+NUMBR*BARWID
      VAUTO(1)= BASPOS
      VAUTO(2)= BASPOS
C
      DO 100 INDEX= ISTART,ISTOP
        VAL=VALUES(INDEX)
        IF (VAL.LT.VAUTO(1)) VAUTO(1)=VAL
        IF (VAL.GT.VAUTO(2)) VAUTO(2)=VAL
  100 CONTINUE
C
      IF (ABS(BAUTO(2)-BAUTO(1)).LT.RMINI.OR.
     &    ABS(VAUTO(2)-VAUTO(1)).LT.RMINI) RETURN
      IF (IBRTYP.EQ.0) CALL G0AUTO(BAUTO,VAUTO,1,2,1,2,1)
      IF (IBRTYP.NE.0) CALL G0AUTO(VAUTO,BAUTO,1,2,1,2,1)
C
      XHERE= XPLOT0
      YHERE= YPLOT0
      IF (LENLST.LE.0) GO TO 5
C
      BRPOS= BORIG
      KOLIND= 1
C
      DO 200 IBAR= ISTART,ISTOP
        BRPOS1= BRPOS+BARWID
        IF (LSTCL0(KOLIND).EQ.0) GO TO 4
C
        IDATA(1)= 0
        IF (LSTCL0(KOLIND).LT.0) IDATA(1)= 1
C
        CALL G3LINK(5,13,-1,IDATA,RDATA)
        IDATA(1)= IABS(LSTCL0(KOLIND))
        CALL G3LINK(5,3,-1,IDATA,RDATA)
        IF (IBRTYP.NE.0) GO TO 2
C
        CALL POSITN(BRPOS,YORIG)
        CALL JOIN(BRPOS,VALUES(IBAR))
        CALL JOIN(BRPOS1,VALUES(IBAR))
        CALL JOIN(BRPOS1,YORIG)
        CALL JOIN(BRPOS,YORIG)
        GO TO 3
C
    2   CALL POSITN(XORIG,BRPOS)
        CALL JOIN(VALUES(IBAR),BRPOS)
        CALL JOIN(VALUES(IBAR),BRPOS1)
        CALL JOIN(XORIG,BRPOS1)
        CALL JOIN(XORIG,BRPOS)
    3   CALL G3LINK(5,4,0,IDATA,RDATA)
    4   BRPOS= BRPOS1
        KOLIND= KOLIND+1
        IF (KOLIND.GT.LENLST) KOLIND= 1
  200 CONTINUE
C
      IF (IDRBND.EQ.0) GO TO 10
C
    5 OLDVAL= -(VALUES(ISTART)-BASPOS)
      CALL POSITN(XORIG,YORIG)
      BRPOS= BORIG
C
      DO 300 IBAR= ISTART,ISTOP
        VALUE= VALUES(IBAR)-BASPOS
        IF (VALUE*OLDVAL.LT.0.0)       GO TO 6
        IF (IBRTYP.EQ.0) CALL POSITN(BRPOS,OLDVAL+BASPOS)
        IF (IBRTYP.NE.0) CALL POSITN(OLDVAL+BASPOS,BRPOS)
        IF (ABS(VALUE).GT.ABS(OLDVAL)) GO TO 6
        IF (IBRTYP.EQ.0) CALL POSITN(BRPOS,VALUE+BASPOS)
        IF (IBRTYP.NE.0) CALL POSITN(VALUE+BASPOS,BRPOS)
        GO TO 7
C
    6   IF (IBRTYP.EQ.0)  CALL JOIN(BRPOS,VALUE+BASPOS)
        IF (IBRTYP.NE.0)  CALL JOIN(VALUE+BASPOS,BRPOS)
C
    7   BRPOS= BRPOS+BARWID
        IF (IBRTYP.NE.0) GO TO 8
C
        CALL JOIN(BRPOS,VALUE+BASPOS)
        CALL JOIN(BRPOS,BASPOS)
        GO TO 9
C
    8   CALL JOIN(VALUE+BASPOS,BRPOS)
        CALL JOIN(BASPOS,BRPOS)
    9   OLDVAL= VALUE
  300 CONTINUE
C
      CALL JOIN(XORIG,YORIG)
   10 CALL POSITN(XHERE,YHERE)
      RETURN
      END
