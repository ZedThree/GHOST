      SUBROUTINE G1LINE(XPOS,YPOS,VISIBL)
C
C          ------------------------------------------------
C          ROUTINE NO. (1023)   VERSION (A8.3)    26:FEB:90
C          ------------------------------------------------
C
C          THIS WINDOWS, MASKS, TRANSFORMS AND DRAWS ALL VECTORS.
C
C
C          THE ARGUMENTS ARE AS FOLLOWS:
C
C          <XPOS>   IS THE NEW END-POINT X-COORDINATE,
C          <YPOS>   IS THE NEW END-POINT Y-COORDINATE,
C          <VISIBL> GIVES THE LINE TYPE:
C                   = .TRUE., A LINE IS DRAWN TO THE NEW END-POINT,
C                   = .FALSE., A MOVE IS MADE TO THE NEW END-POINT.
C
C
C          THE FOLLOWING VARIABLES ARE ALSO IMPORTED:
C
C          <CURTRA> CONTROLS THE CURRENT TRANSFORM:
C                   = .TRUE., A CURRENT TRANSFORM IS DONE,
C                   = .FALSE., A CURRENT TRANSFORM IS NOT DONE.
C          <DLIMX>  IS THE DEVICE (UPPER) X-LIMIT.
C          <DLIMY>  IS THE DEVICE (UPPER) Y-LIMIT.
C          <INDLVL> GIVES THE PICTURE INDENT LEVEL.
C          <IREPLY> GIVES THE STATUS OF A CLIPPED LINE:
C                   = 0, THE LINE HAS NOT BEEN CLIPPED,
C                   = 1, THE LINE HAS BEEN CLIPPED,
C                   = 2, THE LINE IS COMPLETELY OUTSIDE.
C          <ITHIK1> GIVES THE LINE WIDTH.
C          <KLIPM1> GIVES THE CLIPPING TRANSFORMATION MODE:
C                   = 0, THE CLIP-AREAS ARE NOT TRANSFORMED,
C                   = 1, THE CLIP-AREAS ARE TRANSFORMED.
C          <LHRDW1> GIVES THE HARDWARE LINE TYPE:
C                   = .TRUE.,  LINE PATTERNS ARE DONE BY HARDWARE,
C                   = .FALSE., LINE PATTERNS ARE DONE BY SOFTWARE.
C          <MASKIN> CONTROLS THE MASKING:
C                   = .TRUE., MASKING IS DONE,
C                   = .FALSE., MASKING IS NOT DONE.
C          <NFILLI> GIVES THE NUMBER OF THICKENING LINES REQUIRED.
C          [STRTPT] IS THE START POSITION OF A CLIPPED LINE,
C          [STOPPT] IS THE END   POSITION OF A CLIPPED LINE.
C          <THIKST> IS THE HALF-STEP SIZE FOR THICKENING LINES.
C          <WNDOIN> CONTROLS USE OF THE PROGRAM WINDOW:
C                   = .TRUE., WINDOWING IS DONE,
C                   = .FALSE., WINDOWING IS NOT DONE.
C
C
C          AND THE FOLLOWING VARIABLES ARE EXPORTED:
C
C          [POINTS] IS THE SET OF PART-LINES TO BE DRAWN,
C          <NSTRT>  IS THE FIRST ELEMENT IN THE ARRAY,
C          <NSTOP>  IS THE LAST ELEMENT IN THE ARRAY,
C          <XLIM1>  IS THE CLIP-AREA LEFT-EDGE POSITION,
C          <XLIM2>  IS THE CLIP-AREA RIGHT-EDGE POSITION,
C          <YLIM1>  IS THE CLIP-AREA LOWER-EDGE POSITION,
C          <YLIM2>  IS THE CLIP-AREA UPPER-EDGE POSITION.
C
C
      REAL    XMARK(2),YMARK(2),XSKIP(2),YSKIP(2),
     &        END1(2),END2(2),POS1(2),POS2(2)
      DOUBLE PRECISION X,Y,DXA,DYA,DXB,DYB,DISTA,TOTLEN,SEGLEN,
     &                 WIDSXA,WIDSYA,WIDSXB,WIDSYB,XFACTA,YFACTA,
     &                 XPREF1,YPREF1,XPREF2,YPREF2,XOFFA,YOFFA,
     &                 XREF,YREF,DDX,DDY,DIST,STRT,STOP
      LOGICAL FORWRD,VISIBL,SECOND,STRTED,BROKEN
      LOGICAL SHIFT1,LHRDW1,CURTRA,WINLIN,WNDOIN,MASKIN,OPEN
C
      COMMON /T1CLIN/ STRTPT(2),STOPPT(2)
      COMMON /T1CLIP/ XLIM1,XLIM2,YLIM1,YLIM2
      COMMON /T1DENA/ OPEN
      COMMON /T1DLIM/ DLIMX,DLIMY
      COMMON /T1DRES/ DRESX,DRESY
      COMMON /T1HRDL/ LHRDW1
      COMMON /T1LATT/ KOLIN1,ITHIK1
      COMMON /T1LIND/ PATREM
      COMMON /T1LINE/ POINTS(22,2),NSTRT,NSTOP
      COMMON /T1LINT/ ELWID,NFILLI,THIKST
      COMMON /T1LPAT/ MARKA1,MISSA1,MARKB1,MISSB1
      COMMON /T1LVIS/ WINLIN,WNDOIN,MASKIN
      COMMON /T1MASK/ X1MSK1(10),X2MSK1(10),Y1MSK1(10),Y2MSK1(10),MSKLV1
      COMMON /T1PPAT/ XPLOTA,YPLOTA
      COMMON /T1PPBT/ XPLOTB,YPLOTB
      COMMON /T1TCOB/ XCBX,XCBY,YCBX,YCBY,RPICXB,RPICYB,RDEVXB,RDEVYB
      COMMON /T1TCOC/ XCCX,XCCY,YCCX,YCCY,RPICXC,RPICYC,RDEVXC,RDEVYC,
     &                CURTRA
      COMMON /T1TRST/ SHIFT1,MTRAN1,KLIPM1,INDLVL
      COMMON /T1WNDO/ X1WND1,X2WND1,Y1WND1,Y2WND1
      COMMON /T3LIMS/ IMAXI,RMAXI,RMINI
C
C          THESE FUNCTIONS GIVE DIRECTED POSITION VALUES:
C
      DISTL(RARG)= DIRNOW*RARG
      DPOSN(IARG)= DIRNOW*POINTS(IARG,ICOMP)
C
C          THESE FUNCTIONS GIVE THE CURRENT AND BASE TRANSFORMS:
C
      TRANXC(X,Y)= XCCX*(X-RPICXC)+XCCY*(Y-RPICYC)+RDEVXC
      TRANYC(X,Y)= YCCX*(X-RPICXC)+YCCY*(Y-RPICYC)+RDEVYC
      TRANXB(X,Y)= XCBX*(X-RPICXB)+XCBY*(Y-RPICYB)+RDEVXB
      TRANYB(X,Y)= YCBX*(X-RPICXB)+YCBY*(Y-RPICYB)+RDEVYB
C
C
C          THIS SECTION TRANSFORMS THE NEW END-POINT.
C
      XTEMP= XPOS
      YTEMP= YPOS
      IF (.NOT.CURTRA) GO TO 1
C
      XTEMP= TRANXC(DBLE(XPOS),DBLE(YPOS))
      YTEMP= TRANYC(DBLE(XPOS),DBLE(YPOS))
    1 XNEW=  TRANXB(DBLE(XTEMP),DBLE(YTEMP))
      YNEW=  TRANYB(DBLE(XTEMP),DBLE(YTEMP))
      REMNEW= 0.0
      IF (.NOT.VISIBL) GO TO 26
      IF (ABS(XPOS-XPLOTB).LT.RMINI.AND.
     &    ABS(YPOS-YPLOTB).LT.RMINI) GO TO 27
      IF (ABS(XNEW-XPLOTA).LT.RMINI.AND.
     &    ABS(YNEW-YPLOTA).LT.RMINI) GO TO 27
C
      WIDSXB= 0.0
      WIDSYB= 0.0
      BROKEN= ((MARKA1.GT.0.OR.MARKB1.GT.0).AND..NOT.LHRDW1)
      IF (.NOT.BROKEN.AND.ITHIK1.EQ.1) GO TO 2
C
C          THIS SECTION CALCULATES THE OFFSET INCREMENTS
C          IF PATTERNED OR THICKENED LINES ARE REQUIRED.
C
      DXB= XPOS-XPLOTB
      DYB= YPOS-YPLOTB
      DXA= XNEW-XPLOTA
      DYA= YNEW-YPLOTA
      DISTA= SQRT(DXA*DXA+DYA*DYA)
      WIDSXB= -DYB*THIKST/DISTA
      WIDSYB=  DXB*THIKST/DISTA
      IF (.NOT.BROKEN) GO TO 2
C
C          THIS SECTION CALCULATES THE ADDITIONAL VALUES
C          NECESSARY WHEN PATTERNED LINES ARE BEING DRAWN.
C
      TOTLEN= DISTA+PATREM
      SEGLEN= 0.001*(MARKA1+MISSA1+MARKB1+MISSB1)
      REMNEW= DMOD(TOTLEN,SEGLEN)
      ENDOFF= SEGLEN-REMNEW-(0.001*MISSB1)
      IF (ENDOFF.LT.0) ENDOFF= ENDOFF+SEGLEN
C
      XFACTA= DXA/DISTA
      YFACTA= DYA/DISTA
      WIDSXA= -YFACTA*THIKST
      WIDSYA=  XFACTA*THIKST
      XPREF1= XPLOTA-(XFACTA*PATREM)
      YPREF1= YPLOTA-(YFACTA*PATREM)
      XPREF2= XNEW+(XFACTA*ENDOFF)
      YPREF2= YNEW+(YFACTA*ENDOFF)
      XMARK(1)= 0.001*XFACTA*MARKA1
      YMARK(1)= 0.001*YFACTA*MARKA1
      XSKIP(1)= 0.001*XFACTA*MISSA1
      YSKIP(1)= 0.001*YFACTA*MISSA1
      XMARK(2)= 0.001*XFACTA*MARKB1
      YMARK(2)= 0.001*YFACTA*MARKB1
      XSKIP(2)= 0.001*XFACTA*MISSB1
      YSKIP(2)= 0.001*YFACTA*MISSB1
      ICOMPA= 1
      DIRECA= DSIGN(1.0D0,DXA)
      IF (ABS(DXA).GE.ABS(DYA)) GO TO 2
C
      ICOMPA= 2
      DIRECA= DSIGN(1.0D0,DYA)
C
C          LINES ARE ONLY DRAWN IF THE DEVICE HAS BEEN ENABLED.
C          LOOP-100 GENERATES EACH THICKENING LINE IN TURN.
C          (THE FIRST ONE IS ALWAYS IN THE FORWARD DIRECTION).
C
    2 IF (.NOT.OPEN) GO TO 26
C
      FORWRD= .FALSE.
      NHALFS= -NFILLI-1
C
      DO 100 IFILL= 1,NFILLI
        FORWRD= .NOT.FORWRD
        NHALFS= NHALFS+2
        XOFFB= WIDSXB*NHALFS
        YOFFB= WIDSYB*NHALFS
        XSTRT= XPLOTB-XOFFB
        YSTRT= YPLOTB-YOFFB
        XSTOP= XPOS-XOFFB
        YSTOP= YPOS-YOFFB
C
C          THIS SECTION HANDLES VISIBLE PICTURE VECTORS. THE
C          OPERATION SEQUENCE FOR THE TWO VALUES OF <KLIPM1> IS:
C
C          [C-TRAN] [P-WIN] [MASK] [C-TRAN] [B-TRAN] [D-WIN]
C            (0)                     (1)      (0&1)
C
        POINTS(1,1)= XSTRT
        POINTS(1,2)= YSTRT
        POINTS(2,1)= XSTOP
        POINTS(2,2)= YSTOP
        NSTRT= 1
C
C          THIS DOES A CURRENT TRANSFORM FOR MODE 0 (IF REQUIRED).
C
        IF (KLIPM1.NE.0) GO TO 3
        IF (.NOT.CURTRA) GO TO 3
C
        POINTS(1,1)= TRANXC(DBLE(XSTRT),DBLE(YSTRT))
        POINTS(1,2)= TRANYC(DBLE(XSTRT),DBLE(YSTRT))
        POINTS(2,1)= TRANXC(DBLE(XSTOP),DBLE(YSTOP))
        POINTS(2,2)= TRANYC(DBLE(XSTOP),DBLE(YSTOP))
C
C          THIS SECTION SUBJECTS THE LINE TO THE PROGRAM WINDOW.
C          IF IT IS COMPLETELY OUTSIDE, NO MORE NEED BE DONE. IF
C          IT IS COMPLETELY INSIDE, THE END POINTS REMAIN UNCHANGED.
C          OTHERWISE, THE INTERSECTION POINTS BECOME THE END POINTS.
C
    3   IF (.NOT.WNDOIN) GO TO 4
C
        NSTOP= 0
        DX= POINTS(2,1)-POINTS(1,1)
        DY= POINTS(2,2)-POINTS(1,2)
        IF (ABS(DX).LT.RMINI.AND.ABS(DY).LT.RMINI) GO TO 16
C
        NSTOP= 2
        XLIM1= X1WND1
        XLIM2= X2WND1
        YLIM1= Y1WND1
        YLIM2= Y2WND1
        CALL G1CLIP(IREPLY)
        NSTOP= 0
        IF (IREPLY.EQ.2) GO TO 16
        IF (IREPLY.EQ.0) GO TO 4
C
        POINTS(1,1)= STRTPT(1)
        POINTS(1,2)= STRTPT(2)
        POINTS(2,1)= STOPPT(1)
        POINTS(2,2)= STOPPT(2)
C
C          THIS SECTION DOES THE MASKING IF NECESSARY. (IF THE
C          LINE IS COMPLETELY INSIDE ANY MASKING RECTANGLE, NO
C          MORE IS DONE. IF IT IS COMPLETELY OUTSIDE, NO CHANGES
C          ARE MADE TO THE LINE. IF THE LINE CROSSES A MASK AREA,
C          THE APPROPRIATE AMENDMENTS ARE MADE TO THE SEGMENTS).
C
    4   NSTOP= 2
        IF (.NOT.MASKIN) GO TO 12
C
        NSTOP= 0
        DX= POINTS(2,1)-POINTS(1,1)
        DY= POINTS(2,2)-POINTS(1,2)
        IF (ABS(DX).LT.RMINI.AND.ABS(DY).LT.RMINI) GO TO 16
C
        NSTOP= 2
        IF (MSKLV1.LE.0) GO TO 12
C
        ICOMP= 1
        IF (ABS(DX).LT.ABS(DY)) ICOMP= 2
C
        DIRNOW= SIGN(1.0,POINTS(2,ICOMP)-POINTS(1,ICOMP))
C
        DO 200 MASK= 1,MSKLV1
          XLIM1= X1MSK1(MASK)
          XLIM2= X2MSK1(MASK)
          YLIM1= Y1MSK1(MASK)
          YLIM2= Y2MSK1(MASK)
          CALL G1CLIP(IREPLY)
          IF (IREPLY.EQ.2) GO TO 200
          IF (IREPLY.EQ.0) GO TO 11
C
C          THIS LOOP FINDS WHERE THE MASK IS PLACED ON THE LINES.
C
          ENDL1= DISTL(STRTPT(ICOMP))
          ENDL2= DISTL(STOPPT(ICOMP))
          SECOND= .FALSE.
C
          DO 300 LOOK= 1,NSTOP
            IF (SECOND)               GO TO 5
            IF (DPOSN(LOOK).LT.ENDL1) GO TO 300
C
            ISTRT= LOOK-1
            SECOND= .TRUE.
    5       IF (DPOSN(LOOK).LE.ENDL2) GO TO 300
C
            ISTOP= LOOK-1
            GO TO 6
  300     CONTINUE
C
          ISTOP= NSTOP
          IF (.NOT.SECOND) GO TO 200
C
C          THIS SECTION REMOVES INVISIBLE LINES
C          AND MAKES ROOM FOR NEW ONES AS NECESSARY.
C
    6     INC1= MOD(ISTRT,2)
          INC2= MOD(ISTOP,2)
          IOFSET= ISTRT-ISTOP+INC1+INC2
          ITYPE= 2*INC1+INC2
          IF (IOFSET.EQ.0) GO TO 9
C
          NMOVES= NSTOP-ISTOP
          IF (NMOVES.LE.0) GO TO 9
          IF (IOFSET.GT.0) GO TO 7
C
          IDIREC= +1
          IFROM= ISTOP
          GO TO 8
C
    7     IDIREC= -1
          IFROM= NSTOP+1
C
    8     DO 400 MOVE= 1,NMOVES
            IFROM= IFROM+IDIREC
            ITO=   IFROM+IOFSET
            POINTS(ITO,1)= POINTS(IFROM,1)
            POINTS(ITO,2)= POINTS(IFROM,2)
  400     CONTINUE
C
          NSTOP= NSTOP+IOFSET
C
C         THIS SECTION UPDATES EDGE-POINTS WHERE REQUIRED.
C
    9     IF (ITYPE.EQ.0) GO TO 200
          IF (ITYPE.NE.1) GO TO 10
C
          POINTS(ISTRT+1,1)= STOPPT(1)
          POINTS(ISTRT+1,2)= STOPPT(2)
          GO TO 200
C
   10     POINTS(ISTRT+1,1)= STRTPT(1)
          POINTS(ISTRT+1,2)= STRTPT(2)
          IF (ITYPE.EQ.2) GO TO 200
C
          POINTS(ISTRT+2,1)= STOPPT(1)
          POINTS(ISTRT+2,2)= STOPPT(2)
  200   CONTINUE
C
   11   IF (IREPLY.EQ.0) NSTOP= 0
        IF (NSTOP.LE.0) GO TO 16
C
C          THIS DOES A CURRENT TRANSFORM FOR MODE 1 (IF REQUIRED).
C
   12   IF (KLIPM1.NE.1) GO TO 13
        IF (.NOT.CURTRA) GO TO 13
C
        DO 500 IPT= 1,NSTOP
          XTEMP= TRANXC(DBLE(POINTS(IPT,1)),DBLE(POINTS(IPT,2)))
          YTEMP= TRANYC(DBLE(POINTS(IPT,1)),DBLE(POINTS(IPT,2)))
          POINTS(IPT,1)= XTEMP
          POINTS(IPT,2)= YTEMP
  500   CONTINUE
C
C          THIS DOES A BASE TRANSFORM FOR MODES 0 AND 1
C          (BUT IS NOT DONE WHEN THE INDENT LEVEL IS 0).
C
   13   IF (INDLVL.LE.0) GO TO 14
C
        DO 600 IPT= 1,NSTOP
          XTEMP= TRANXB(DBLE(POINTS(IPT,1)),DBLE(POINTS(IPT,2)))
          YTEMP= TRANYB(DBLE(POINTS(IPT,1)),DBLE(POINTS(IPT,2)))
          POINTS(IPT,1)= XTEMP
          POINTS(IPT,2)= YTEMP
  600   CONTINUE
C
C          THIS SECTION SUBJECTS THE LINE TO THE DEVICE WINDOW.
C
   14   XLIM1= 0.0
        XLIM2= DLIMX
        YLIM1= 0.0
        YLIM2= DLIMY
        CALL G1CLIP(IREPLY)
        LIMIT= NSTOP
        IF (IREPLY.EQ.2) NSTOP= 0
        IF (IREPLY.NE.1) GO TO 16
C
        DX= POINTS(NSTOP,1)-POINTS(1,1)
        DY= POINTS(NSTOP,2)-POINTS(1,2)
        IF (ABS(DX).LT.RMINI.AND.ABS(DY).LT.RMINI) NSTOP= 0
        IF (NSTOP.EQ.0) GO TO 16
C
        ICOMP= 1
        IF (ABS(DX).LT.ABS(DY)) ICOMP= 2
C
        DIRNOW= SIGN(1.0,POINTS(NSTOP,ICOMP)-POINTS(1,ICOMP))
        ENDL1= DISTL(STRTPT(ICOMP))
        ENDL2= DISTL(STOPPT(ICOMP))
        SECOND= .FALSE.
C
        DO 700 LOOK= 1,LIMIT,2
          IF (SECOND)                 GO TO 15
          IF (DPOSN(LOOK+1).LE.ENDL1) GO TO 700
C
          NSTRT= LOOK
          SECOND= .TRUE.
          IF (DPOSN(LOOK).GE.ENDL1)   GO TO 15
C
          POINTS(NSTRT,1)= STRTPT(1)
          POINTS(NSTRT,2)= STRTPT(2)
   15     IF (DPOSN(LOOK+1).LE.ENDL2) GO TO 700
C
          NSTOP= LOOK-1
          IF (DPOSN(LOOK).GE.ENDL2)   GO TO 16
C
          NSTOP= LOOK+1
          POINTS(NSTOP,1)= STOPPT(1)
          POINTS(NSTOP,2)= STOPPT(2)
          GO TO 16
  700   CONTINUE
C
C          THIS PART DRAWS THE LINE, EITHER FULL OR PATTERNED.
C
   16   IF (NSTRT.GE.NSTOP) GO TO 100
        IF (BROKEN)         GO TO 18
C
C          THIS SECTION IS FOR FULL LINES.
C
        IF (FORWRD) GO TO 17
C
        DO 800 LINE= NSTRT,NSTOP,2
          LINE2= NSTOP-LINE+NSTRT
          IXFROM= (DRESX*POINTS(LINE2,  1))+0.5
          IYFROM= (DRESY*POINTS(LINE2,  2))+0.5
          IXTO=   (DRESX*POINTS(LINE2-1,1))+0.5
          IYTO=   (DRESY*POINTS(LINE2-1,2))+0.5
          CALL G1FILB(IXFROM,IYFROM,IXTO,IYTO)
  800   CONTINUE
        GO TO 100
C
   17   DO 900 LINE= NSTRT,NSTOP,2
          IXFROM= (DRESX*POINTS(LINE,  1))+0.5
          IYFROM= (DRESY*POINTS(LINE,  2))+0.5
          IXTO=   (DRESX*POINTS(LINE+1,1))+0.5
          IYTO=   (DRESY*POINTS(LINE+1,2))+0.5
          CALL G1FILB(IXFROM,IYFROM,IXTO,IYTO)
  900   CONTINUE
        GO TO 100
C
C          THIS SECTION IS FOR PATTERNED LINES.
C
C          THE PATTERN REFERENCE POINT AND THE
C          DIRECTION INDICATORS ARE FIRST FOUND.
C
   18   XOFFA= WIDSXA*NHALFS
        YOFFA= WIDSYA*NHALFS
        XREF= XPREF1-XOFFA
        YREF= YPREF1-YOFFA
        DIRNOW= DIRECA
        DIREC= +1.0
        IF (FORWRD) GO TO 19
C
        DIRNOW= -DIRNOW
        DIREC= -1.0
        XREF= XPREF2-XOFFA
        YREF= YPREF2-YOFFA
C
C          EACH LINE-SEGMENT IS TAKEN IN TURN (IN LOOP-1000)
C          AND ITS STARTING AND ENDING PATTERN-SEGMENTS FOUND.
C          THE PATTERN IS GENERATED BY REPEATING THE DEFINED
C          MARK/SPACE PAIRS (IN LOOP-1100) WITHIN THESE LIMITS,
C          ENSURING AT THE SAME TIME THAT THE ENTIRE SEQUENCE
C          DOES NOT EXTEND OUTSIDE THE LINE-SEGMENT END-POINTS.
C
   19   DO 1000 LINE= NSTRT,NSTOP,2
          IF (FORWRD) GO TO 21
C
          LINE2= NSTOP-LINE+NSTRT
          END1(1)= POINTS(LINE2,1)
          END1(2)= POINTS(LINE2,2)
          END2(1)= POINTS(LINE2-1,1)
          END2(2)= POINTS(LINE2-1,2)
          GO TO 22
C
   21     END1(1)= POINTS(LINE,1)
          END1(2)= POINTS(LINE,2)
          END2(1)= POINTS(LINE+1,1)
          END2(2)= POINTS(LINE+1,2)
   22     DDX= END1(1)-XREF
          DDY= END1(2)-YREF
          DIST= DSQRT(DDX*DDX+DDY*DDY)
          STRT= DINT(DIST/SEGLEN)
          DDX= END2(1)-XREF
          DDY= END2(2)-YREF
          DIST= DSQRT(DDX*DDX+DDY*DDY)
          STOP= DINT(DIST/SEGLEN+1)
          NSEGS= DINT(2.0*(STOP-STRT))
          IEND= NSEGS-1
          POS1(1)= XREF+DIREC*XFACTA*(STRT*SEGLEN)
          POS1(2)= YREF+DIREC*YFACTA*(STRT*SEGLEN)
          DEND1= DIRNOW*END1(ICOMPA)
          DEND2= DIRNOW*END2(ICOMPA)
          STRTED= .FALSE.
          KMARK= 1
          IF (FORWRD) KMARK= 2
C
          KMISS= 2
C
          DO 1100 ISEG= 1,NSEGS
            KMARK= MOD(KMARK,2)+1
            KMISS= MOD(KMISS,2)+1
            POS2(1)= POS1(1)+DIREC*XMARK(KMARK)
            POS2(2)= POS1(2)+DIREC*YMARK(KMARK)
C
C          THIS PART ENSURES THAT THE PATTERN START-POINT
C          IS NOT OUTSIDE THE LINE-SEGMENT START-POSITION.
C
            IF (STRTED) GO TO 23
            IF (DIRNOW*POS2(ICOMPA).LE.DEND1) GO TO 25
C
            STRTED= .TRUE.
            POS1(1)= END1(1)
            POS1(2)= END1(2)
C
C          THIS PART ENSURES THAT THE PATTERN END-POINT
C          IS NOT OUTSIDE THE LINE-SEGMENT END-POSITION.
C
   23       IF (ISEG.LT.IEND) GO TO 24
            IF (DIRNOW*POS1(ICOMPA).GE.DEND2) GO TO 1000
            IF (DIRNOW*POS2(ICOMPA).LE.DEND2) GO TO 24
C
            POS2(1)= END2(1)
            POS2(2)= END2(2)
C
C          THIS PART DRAWS THE VISIBLE PORTION OF THE PATTERN SEGMENT.
C
   24       IXFROM= (DRESX*POS1(1))+0.5
            IYFROM= (DRESY*POS1(2))+0.5
            IXTO=   (DRESX*POS2(1))+0.5
            IYTO=   (DRESY*POS2(2))+0.5
            CALL G1FILB(IXFROM,IYFROM,IXTO,IYTO)
C
C          THIS PART UPDATES THE PATTERN-SEGMENT START POSITION.
C          IF THE FIRST PATTERN-SEGMENT IS COMPLETELY OUTSIDE
C          THE LINE-SEGMENT, THE START-INDICATOR IS SET HERE.
C
   25       POS1(1)= POS2(1)+DIREC*XSKIP(KMISS)
            POS1(2)= POS2(2)+DIREC*YSKIP(KMISS)
            IF (STRTED) GO TO 1100
            IF (DIRNOW*POS1(ICOMPA).GE.DEND1) STRTED= .TRUE.
C
 1100     CONTINUE
 1000   CONTINUE
  100 CONTINUE
C
   26 PATREM= REMNEW
C
C          LASTLY, THE PRE- AND POST-TRANSFORM POSITIONS ARE UPDATED.
C
   27 XPLOTB= XPOS
      YPLOTB= YPOS
      XPLOTA= XNEW
      YPLOTA= YNEW
C
      RETURN
      END
